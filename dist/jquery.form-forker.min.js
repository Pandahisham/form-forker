!function(a){"use strict";a.fn.forkable=function(b){var c=function(a,b){var c=b||{};this.$domForm=a,this.opts=c,this.init()};c.prototype={getForks:function(){var b=this,c=[],d=[],e=b.$domForm.find("[data-parent-branch]");a.each(e,function(e,f){var g=a(f).data("parent-branch");if(-1===c.indexOf(g)){c.push(g);var h=b.$domForm.find('input[name="'+g+'"], select[name="'+g+'"]');d.push(h)}}),b.forks=d},init:function(){var b=this;b.getForks(),b.$domForm.addClass("forkable"),b.opts.branchingMethods&&a.each(b.opts.branchingMethods,function(a,c){"undefined"!=typeof b[a]&&console.warn("Note: You are overriding one of Form Forker's default branching methods with \""+a+'". If this was not your intention, try renaming your custom branching method.'),b[a]=c}),a.each(b.forks,function(c,d){"text"===a(d).prop("type")&&a(d).keyup(function(){a(d).trigger("change")}),a(d).change(function(a){b.handleInputChange(a.currentTarget)})})},handleInputChange:function(b){var c=this.$domForm.find("div[data-parent-branch="+a(b).prop("name")+"]"),d=a(b).data("branching-fn"),e=a(b).val();!d&&isNaN(parseInt(e))?this.stringEval(c,e):d?this[d](c,e):this.integerEval(c,parseInt(e))},postData:function(){var b=this.domForm.find('div:not(".hidden")'),c=b.find("> input, > textarea, > select"),d={};return a.each(c,function(b,c){var e;e="radio"===a(c).prop("type")?a("input:checked").val():a(c).val(),e&&(d[a(c).prop("name")]=e)}),d},util:{cleanString:function(a){return a.toLowerCase().replace(/^\s+|\s+$/g,"")},convertToArithmeticComparison:function(a,b,c){switch(a){case"gte":return b>=c;case"gt":return b>c;case"lte":return c>=b;case"lt":return c>b;case"eq":return b===c;case"noteq":return b!==c}},parseNumericConditions:function(b,c,d){var e,f=this,g=parseInt(b);return a.each(c,function(a,b){var c=b.split("-"),h=c[0],i=parseInt(c[1]),j=f.convertToArithmeticComparison(h,g,i);return d&&"_or_"===d&&j===!0?(e=!0,!1):d&&"_and_"===d&&j===!1?(e=!1,!1):void(e=j)}),e}},integerEval:function(b,c){var d,e,f,g=this,h=parseInt(c);a.each(b,function(b,c){var i,j=a(c),k=a(c).data("show-on-value"),l=typeof k;switch("string"===l&&(-1!==k.indexOf(",")?l="integerArray":-1!==k.indexOf("..")?l="inclusiveRange":null!==k.match(/\_and\_|\_or\_/g)&&(l="logicalExpression")),l){case"number":e=["eq-"+k];break;case"string":e="!"===k.charAt(0)?["noteq-"+k.slice(1)]:[k];break;case"inclusiveRange":f=k.split(".."),d="_and_",e=["gte-"+f[0],"lte-"+f[1]];break;case"integerArray":f=k.split(","),e=[],a.each(f,function(a,b){"!"===b.charAt(0)?(e.push("noteq-"+b.slice(1)),d="_and_"):(e.push("eq-"+b),d="_or_")});break;case"logicalExpression":f=k.split(/(\_and\_|\_or\_)/g),d=f[1],e=[f[0],f[2]]}i=g.util.parseNumericConditions(h,e,d),i?j.removeClass("hidden").find("> div.field").removeClass("hidden"):j.addClass("hidden"),j.find("div.field").addClass("hidden")})},stringEval:function(b,c){var d,e=this,f=e.util.cleanString(c);a.each(b,function(b,c){var g=a(c),h=g.data("show-on-value").toString().split(",");h=a.map(h,function(a){return e.util.cleanString(a)}),d=-1!==h.indexOf(f),d?g.removeClass("hidden").find("> div.field").removeClass("hidden"):g.addClass("hidden"),g.find("div.field").addClass("hidden")})}};var d=new c(a(this),b);return d}}(window.jQuery||window.Zepto,window,document);